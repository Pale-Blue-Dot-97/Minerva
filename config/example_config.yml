# EXAMPLE MASTER CONFIG FILE

# === PATHS ===========================================================================================================
dir:
  data:
    - 'G:'
    - 'GitHub'
    - 'Minerva'
    - 'Minerva'
    - 'data'
    - 'landcovernet'
  configs:
    data_config: '../../config/ChesapeakeCVPR.yml'
    imagery_config: '../../config/landcovernet.yml'
  results:
    - 'F:'
    - 'Harry'
    - 'University'
    - 'Postgraduate'
    - 'OneDrive - University of Southampton'
    - 'Output Plots'
    - 'MinervaPercep'
    - 'FCNResNet'
  cache:
    - 'G:'
    - 'GitHub'
    - 'Minerva'
    - 'Minerva'
    - 'cache'

# Kwargs for make_datasets
model_name: 'FCN32ResNet50-MkI' # Name of model. Substring before hyphen is used to find and initialise model object.
model_type: 'segmentation'      # Type of model. Can be mlp, scene_classifier, segmentation.
frac: 1.0                       # Fraction of patches in the dataset to use.
split: [0.8, 0.15, 0.05]        # Fractional size of the train, validation and test datasets.
elim: False
balance: False
patch_size: [56, 56]

# === DATASET PARAMETERS ==============================================================================================
dataset_params:
  # Training Dataset
  train:
    imagery:
      module: 'torchgeo.datasets'
      name: 'NAIP'
      root: 'NAIP 2013'
      params:
        res: 1.0

    labels:
      module: 'torchgeo.datasets'
      name: 'Chesapeake13'
      root: 'Chesapeake'
      params:
        res: 1.0
        download: False
        checksum: False

  # Validation Dataset
  val:
    imagery:
      module: 'torchgeo.datasets'
      name: 'NAIP'
      root: 'NAIP 2013'
      params:
        res: 1.0

    labels:
      module: 'torchgeo.datasets'
      name: 'Chesapeake13'
      root: 'Chesapeake'
      params:
        res: 1.0
        download: False
        checksum: False

  # Test Dataset
  test:
    imagery:
      module: 'torchgeo.datasets'
      name: 'NAIP'
      root: 'NAIP 2013'
      params:
        res: 1.0

    labels:
      module: 'torchgeo.datasets'
      name: 'Chesapeake13'
      root: 'Chesapeake'
      params:
        res: 1.0
        download: False
        checksum: False

# === SAMPLER PARAMETERS ==============================================================================================
sampler_params:
  # Training Dataset Sampler
  train:
    module: 'torchgeo.samplers'
    name: 'RandomGeoSampler'
    params:
      size: 256
      #batch_size: 16
      length: 1600

  # Validation Dataset Sampler
  val:
    module: 'torchgeo.samplers'
    name: 'RandomGeoSampler'
    params:
      size: 256
      #batch_size: 16
      length: 400

  # Test Dataset Sampler
  test:
    module: 'torchgeo.samplers'
    name: 'RandomGeoSampler'
    params:
      size: 256
      #batch_size: 16
      length: 400


# === TRANSFORM PARAMETERS ============================================================================================
transform_params:
  # Training Dataset Transforms
  train:
    imagery: False
      #ConvertImageDtype:
        #dtype: torch.FloatTensor
    labels: False
      #ConvertImageDtype:
        #dtype: torch.LongTensor

  # Validation Dataset Transforms
  val:
    imagery: False
      #ConvertImageDtype:
        #dtype: torch.FloatTensor
    labels: False
      #ConvertImageDtype:
        #dtype: torch.LongTensor

  # Test Dataset Transforms
  test:
    imagery: False
      #ConvertImageDtype:
        #dtype: torch.FloatTensor
    labels: False
      #ConvertImageDtype:
        #dtype: torch.LongTensor

# Collation
collator:
  module: 'torchgeo.datasets'
  name: 'stack_samples'

# Model hyper-parameters
hyperparams:
  params:
    batch_size: 16
    num_workers: 6
    pin_memory: True
  model_params:
    input_size: [4, 256, 256]
    n_classes: 16
    #groups: 32
    #width_per_group: 4
    #batch_size: 16
  optim_name: SGD
  optim_params:
    lr: 1.0E-2
    #momentum: 0.9
  loss_name: CrossEntropyLoss
  loss_params:
  max_epochs: 5

# Which plots to make
plots:
  History: True
  CM: True
  Pred: True
  ROC: False
  micro: False
  macro: True
  Mask: False
  PvT: False

# opt to ask at runtime; auto or True to automatically do so; or False, None etc to not
save_model: False
run_tensorboard: False
save: True
show: False
p_dist: False
calc_norm: False
plot_last_epoch: True
