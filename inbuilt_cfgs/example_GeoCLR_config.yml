---
#       *       *    __  ________   ____________ _    _____
#   *        *      /  |/  /  _/ | / / ____/ __ \ |  / /   |  *           *
#       *          / /|_/ // //  |/ / __/ / /_/ / | / / /| |     *
#   *       *     / /  / // // /|  / /___/ _, _/| |/ / ___ |               *
#    *           /_/  /_/___/_/ |_/_____/_/ |_| |___/_/  |_|     *   *
#
#                     EXAMPLE GeoCLR MASTER CONFIG FILE
#
# === PATHS ===================================================================
dir:
    data: tests/tmp/data
    configs:
        imagery_config: NAIP.yml
        data_config: Chesapeake7.yml
    results: tests/tmp/results
    cache: tests/tmp/cache

# === HYPERPARAMETERS =========================================================
# ---+ Model Specification +---------------------------------------------------
# Name of model. Substring before hyphen is model class.
model_name: SimCLR18-test

# Type of model. Can be mlp, scene classifier, segmentation, ssl or siamese.
model_type: siamese

# ---+ Sizing +----------------------------------------------------------------
batch_size: 8                         # Number of samples in each batch.
patch_size: &patch_size [32, 32]      # 2D tuple or float.
input_size: &input_size [4, 32, 32]   # patch_size plus leading channel dim.

# ---+ Experiment Execution +--------------------------------------------------
max_epochs: 4                         # Maximum number of training epochs.
elim: false                           # Eliminates empty classes from schema.
balance: false                        # Balances dataset classes.
pre_train: true                       # Activate pre-training mode.
fine_tune: false                      # Activate fine-tuning mode.

# ---+ Loss and Optimisers +---------------------------------------------------
loss_func: NTXentLoss                 # Name of the loss function to use.
lr: 1.0E-2                            # Learning rate of optimiser.
optim_func: SGD                       # Name of the optimiser function.

# ---+ SSL/ Siamese Options +--------------------------------------------------
sample_pairs: true                    # Activates Siamese paired sampling.
max_r: &max_r 56  # Max distance between patches within a Siamese pair.
knn_k: 5          # Top-k most similar images used to predict image for KNN val
val_freq: 2       # Validation epoch every ``val_freq`` training epochs.

# ---+ Model Parameters +------------------------------------------------------
model_params:
    module:
    params:
        input_size: *input_size
        # any other params...

# ---+ Optimiser Parameters +--------------------------------------------------
optim_params:
    params:

# ---+ Loss Function Parameters +----------------------------------------------
loss_params:
    module: lightly.loss
    params:
        temperature: 0.5

# ---+ Dataloader Parameters +-------------------------------------------------
loader_params:
    num_workers: 1
    pin_memory: true

# === WANDB LOGGING ===========================================================
wandb_log: true              # Activates wandb logging.
project: pytest              # Define the project name for wandb.
wandb_dir: /test/tmp/wandb   # Directory to store wandb logs locally.

# === MODEL IO & LOGGING ======================================================
# ---+ Minerva Inbuilt Logging Functions +-------------------------------------
logger: SSLLogger
metrics: SSLMetrics
model_io: ssl_pair_tg

record_int: true    # Store integer results in memory.
record_float: true  # Store floating point results too. Beware memory overload!

# ---+ Collator +--------------------------------------------------------------
collator:
    module: torchgeo.datasets
    name: stack_samples

# === DATASET PARAMETERS ======================================================
dataset_params:
    # Training Dataset
    train:
        image:
            module: minerva.datasets
            name: TstImgDataset
            root: test_images
            params:
                res: 1.0

    # Validation Dataset
    val:
        image:
            module: minerva.datasets
            name: TstImgDataset
            root: test_images
            params:
                res: 1.0

        mask:
            module: minerva.datasets
            name: TstMaskDataset
            root: test_lc
            params:
                res: 1.0

    # Test Dataset
    test:
        image:
            module: minerva.datasets
            name: TstImgDataset
            root: test_images
            params:
                res: 1.0

        mask:
            module: minerva.datasets
            name: TstMaskDataset
            root: test_lc
            params:
                res: 1.0

# === SAMPLER PARAMETERS ======================================================
sampler_params:
    # Training Dataset Sampler
    train:
        module: minerva.samplers
        name: RandomPairGeoSampler
        roi: false
        params:
            size: *patch_size
            length: 120
            max_r: *max_r

    # Validation Dataset Sampler
    val:
        module: torchgeo.samplers
        name: RandomGeoSampler
        roi: false
        params:
            size: *patch_size
            length: 32

    # Test Dataset Sampler
    test:
        module: torchgeo.samplers
        name: RandomGeoSampler
        roi: false
        params:
            size: *patch_size
            length: 32

# === TRANSFORM PARAMETERS ====================================================
transform_params:
    # Training Dataset Transforms
    train:
        image:
            Normalise:
                module: minerva.transforms
                norm_value: 255
            RandomApply:
                p: 0.25
                RandomResizedCrop:
                    module: torchvision.transforms
                    size: *patch_size
            DetachedColorJitter:
                module: minerva.transforms
                brightness: 0.8
                contrast: 0.8
                saturation: 0.8
                hue: 0.2
            RandomHorizontalFlip:
                module: torchvision.transforms
            RandomVerticalFlip:
                module: torchvision.transforms
            GaussianBlur:
                module: torchvision.transforms
                kernel_size: 25

    # Validation Dataset Transforms
    val:
        image: false
        mask: false

    test:
        image: false
        mask: false

# === PLOTTING OPTIONS ========================================================
plots:
    History: true   # Plot of the training and validation metrics over epochs.
    CM: false       # Confusion matrix.
    Pred: false     # Pie chart of the distribution of the predicted classes.
    ROC: false      # Receiver Operator Characteristics for each class.
    micro: false    # Include micro averaging in ROC plot.
    macro: false    # Include macro averaging in ROC plot.
    Mask: false     # Plot predicted masks against ground truth and imagery.

# === MISCELLANEOUS OPTIONS ===================================================
# ---+ Early Stopping +--------------------------------------------------------
stopping:
    patience: 2    # No. of val epochs with increasing loss before stopping.
    verbose: true  # Verbosity of early stopping prints to stdout.

# ---+ Verbosity and Saving +--------------------------------------------------
verbose: true           # Verbosity of Trainer print statements to stdout.
save: true              # Saves created figures to file.
show: false             # Shows created figures in a pop-up window.
p_dist: true            # Shows the distribution of classes to stdout.
plot_last_epoch: true   # Plot the results of the last training and val epochs.

# opt to ask at runtime; auto or True to automatically do so; or False,
# None etc to not
save_model: false

# ---+ Other +-----------------------------------------------------------------
# opt to ask at runtime; auto or True to automatically do so; or False,
# None etc to not
run_tensorboard: false
calc_norm: false
